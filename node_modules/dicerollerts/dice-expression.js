export function die(sides) {
    return {
        type: 'die',
        sides
    };
}
export function literal(value) {
    return {
        type: 'literal',
        value
    };
}
export function diceReduce(reduceable, reducer) {
    return {
        type: 'dice-reduce',
        reduceable,
        reducer
    };
}
export function binaryOp(op, left, right) {
    return {
        type: 'binary-op',
        op,
        left,
        right
    };
}
export function unaryOp(op, expr) {
    return {
        type: 'unary-op',
        op,
        expr
    };
}
export var DiceReducer;
(function (DiceReducer) {
    DiceReducer["Sum"] = "sum";
    DiceReducer["Min"] = "min";
    DiceReducer["Max"] = "max";
    DiceReducer["Average"] = "average";
    DiceReducer["Median"] = "median";
})(DiceReducer || (DiceReducer = {}));
export function diceExpressions(...exprs) {
    return {
        type: 'dice-expressions',
        exprs
    };
}
export function diceListWithFilter(list, filter) {
    return {
        type: 'dice-list-with-filter',
        list,
        filter
    };
}
export function diceListWithMap(dice, functor) {
    return {
        type: 'dice-list-with-map',
        dice,
        functor
    };
}
export function filterableDiceArray(dice) {
    return {
        type: 'filterable-dice-array',
        dice
    };
}
export function filterableDiceExpressions(...exprs) {
    return {
        type: 'filterable-dice-expressions',
        exprs
    };
}
export function drop(dir, value) {
    return {
        type: 'drop',
        dir,
        value
    };
}
export function keep(dir, value) {
    return {
        type: 'keep',
        dir,
        value
    };
}
export function explode(times, range) {
    return {
        type: 'explode',
        times,
        range
    };
}
export function reroll(times, range) {
    return {
        type: 'reroll',
        times,
        range
    };
}
export function always() {
    return {
        type: 'always'
    };
}
export function upTo(value) {
    return {
        type: 'up-to',
        value
    };
}
export function exact(value) {
    return {
        type: 'exact',
        value
    };
}
export function between(minInclusive, maxInclusive) {
    return {
        type: 'between',
        minInclusive,
        maxInclusive
    };
}
export function valueOrMore(value) {
    return {
        type: 'value-or-more',
        value
    };
}
export function valueOrLess(value) {
    return {
        type: 'value-or-less',
        value
    };
}
export function composite(ranges) {
    return {
        type: 'composite',
        ranges
    };
}
export var LowHigh;
(function (LowHigh) {
    LowHigh["Low"] = "low";
    LowHigh["High"] = "high";
})(LowHigh || (LowHigh = {}));
export var DiceBinOp;
(function (DiceBinOp) {
    DiceBinOp["Sum"] = "sum";
    DiceBinOp["Difference"] = "difference";
    DiceBinOp["Multiplication"] = "multiplication";
    DiceBinOp["Division"] = "division";
})(DiceBinOp || (DiceBinOp = {}));
export var DiceUnOp;
(function (DiceUnOp) {
    DiceUnOp["Negate"] = "negate";
})(DiceUnOp || (DiceUnOp = {}));
export function insufficientSides(sides) {
    return {
        type: 'insufficient-sides',
        sides
    };
}
export function emptySet() {
    return {
        type: 'empty-set'
    };
}
export function infiniteReroll(sides, range) {
    return {
        type: 'infinite-reroll',
        sides,
        range
    };
}
export function tooManyDrops(available, toDrop) {
    return {
        type: 'too-many-drops',
        available,
        toDrop
    };
}
export function tooManyKeeps(available, toKeep) {
    return {
        type: 'too-many-keeps',
        available,
        toKeep
    };
}
export function dropOrKeepShouldBePositive() {
    return {
        type: 'drop-or-keep-should-be-positive'
    };
}
