import { type Range, type DiceFilter, type DiceFunctor, DiceReducer, type Roll, type DiceExpression } from './dice-expression';
import { type DiceResultMapped, type DieResult, type DieResultFilter, type RollResult } from './roll-result';
export declare class Roller {
    private readonly dieRoll;
    static matchRange(r: number, range: Range): boolean;
    static filterf(filter: DiceFilter): (res: number, length: number) => boolean;
    constructor(dieRoll: Roll);
    private rollDiceReduce;
    roll(expr: DiceExpression): RollResult;
    mapRolls(rolls: DieResult[], functor: DiceFunctor): DiceResultMapped[];
    explodeRoll(roll: DieResult, times: number, range: Range): DiceResultMapped;
    rerollRoll(roll: DieResult, times: number, range: Range): DiceResultMapped;
    rollRange(roll: DieResult, times: number, range: Range): DieResult[];
    keepMappedRolls(rolls: DiceResultMapped[]): DieResult[];
    filterRolls(rolls: RollResult[], filter: DiceFilter): DieResultFilter[];
    keepFilteredRolls(rolls: DieResultFilter[]): RollResult[];
    reduceRolls(rolls: RollResult[], reducer: DiceReducer): number;
    reduceResults(results: number[], reducer: DiceReducer): number;
    getRollResults(rolls: RollResult[]): number[];
}
