import { type DiceBinOp, type DiceFilter, type DiceFunctor, type DiceReducer, type DiceUnOp, type Sides } from './dice-expression';
export interface OneResult {
    type: 'one-result';
    die: DieResult;
}
export declare function oneResult(die: DieResult): OneResult;
export interface LiteralResult {
    type: 'literal-result';
    value: number;
    result: number;
}
export declare function literalResult(value: number, result: number): LiteralResult;
export interface DiceReduceResult {
    type: 'dice-reduce-result';
    reduceables: DiceReduceableResult;
    reducer: DiceReducer;
    result: number;
}
export declare function diceReduceResult(reduceables: DiceReduceableResult, reducer: DiceReducer, result: number): DiceReduceResult;
export interface BinaryOpResult {
    type: 'binary-op-result';
    op: DiceBinOp;
    left: RollResult;
    right: RollResult;
    result: number;
}
export declare function binaryOpResult(op: DiceBinOp, left: RollResult, right: RollResult, result: number): BinaryOpResult;
export interface UnaryOpResult {
    type: 'unary-op-result';
    op: DiceUnOp;
    expr: RollResult;
    result: number;
}
export declare function unaryOpResult(op: DiceUnOp, expr: RollResult, result: number): UnaryOpResult;
export type RollResult = OneResult | LiteralResult | DiceReduceResult | BinaryOpResult | UnaryOpResult;
export interface DiceExpressionsResult {
    type: 'dice-expressions-result';
    rolls: RollResult[];
}
export declare function diceExpressionsResult(rolls: RollResult[]): DiceExpressionsResult;
export interface DiceFilterableResult {
    type: 'dice-filterable-result';
    rolls: DieResultFilter[];
    filter: DiceFilter;
}
export declare function diceFilterableResult(rolls: DieResultFilter[], filter: DiceFilter): DiceFilterableResult;
export interface DiceMapeableResult {
    type: 'dice-mapeable-result';
    rolls: DiceResultMapped[];
    functor: DiceFunctor;
}
export declare function diceMapeableResult(rolls: DiceResultMapped[], functor: DiceFunctor): DiceMapeableResult;
export type DiceReduceableResult = DiceExpressionsResult | DiceFilterableResult | DiceMapeableResult;
export interface Rerolled {
    type: 'rerolled';
    rerolls: DieResult[];
}
export declare function rerolled(rerolls: DieResult[]): Rerolled;
export interface Exploded {
    type: 'exploded';
    explosions: DieResult[];
}
export declare function exploded(explosions: DieResult[]): Exploded;
export interface Normal {
    type: 'normal';
    roll: DieResult;
}
export declare function normal(roll: DieResult): Normal;
export type DiceResultMapped = Rerolled | Exploded | Normal;
export interface DieResult {
    type: 'die-result';
    result: number;
    sides: Sides;
}
export declare function dieResult(result: number, sides: Sides): DieResult;
export interface KeepResult {
    type: 'keep-result';
    roll: RollResult;
}
export declare function keepResult(roll: RollResult): KeepResult;
export interface DiscardResult {
    type: 'discard-result';
    roll: RollResult;
}
export declare function discardResult(roll: RollResult): DiscardResult;
export type DieResultFilter = KeepResult | DiscardResult;
