import { type Clear } from './clean';
export type ProviderMark<T> = symbol;
export declare function makeProviderMark<T>(): ProviderMark<T>;
export type Providers = Record<ProviderMark<unknown>, unknown>;
export declare class DOMContext {
    private readonly document;
    private readonly element;
    private readonly reference;
    private readonly ns;
    private readonly providers;
    static of(element: HTMLElement): DOMContext;
    constructor(document: Document, element: HTMLElement, reference: Text | undefined, ns: string | undefined, providers: Providers);
    append(node: Node): void;
    getElement(): HTMLElement;
    getDocument(): Document;
    makeReference(): DOMContext;
    makeElement(tagName: string): DOMContext;
    getBooleanAttribute(name: string): boolean;
    setBooleanAttribute(name: string, value: boolean): void;
    createBooleanAttribute(name: string, value: boolean): [(newValue: boolean) => void, Clear];
    getAttribute(name: string): string | null;
    setAttribute(name: string, value: string | null): void;
    createAttribute(name: string, value: string): [(newValue: string) => void, Clear];
    getProperty<T>(name: string): T;
    setProperty<T>(name: string, value: T): void;
    createProperty<T>(name: string, value: T): [(newValue: T) => void, Clear];
    createText(text: string): [(newText: string) => void, Clear];
    createClass(cls: string): [(newClass: string) => void, Clear];
    createHandler<T>(name: string, handler: (event: T) => void): Clear;
    private readonly suspendedClears;
    delayClear(f: (removeTree: boolean, clear: () => void) => void): (removeTree: boolean) => void;
    requestClear(removeTree: boolean, willClear: () => void): void;
    private clear;
    withProvider<T>(mark: ProviderMark<T>, provider: T): DOMContext;
    getProvider<T>(mark: ProviderMark<T>): T;
    setStyle(name: string, value: string | undefined | null): void;
    createStyle(name: string, value: string | undefined | null): [(newValue: string) => void, Clear];
}
