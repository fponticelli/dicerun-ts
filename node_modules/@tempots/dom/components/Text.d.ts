import { Signal } from '../prop';
import { type Renderable } from '../renderable';
import { type Clear } from '../clean';
import { type DOMContext } from '../dom-context';
export declare function subscribeToSignal<T>(prop: Signal<T>, listener: (value: T) => void, clear: Clear): Clear;
export declare class TextImpl implements Renderable {
    private readonly text;
    constructor(text: Signal<string>);
    readonly appendTo: (ctx: DOMContext) => Clear;
}
export type Primitive = string | number | boolean | Date;
export interface TextProps {
    children?: Signal<Primitive | undefined> | Signal<Primitive> | Primitive;
}
export declare function Text({ children }: TextProps): Renderable;
