import { makeRenderable } from '../jsx-runtime';
// eslint-disable-next-line @typescript-eslint/no-explicit-any
export class MatchImpl {
    on;
    using;
    matches;
    constructor(on, using, matches) {
        this.on = on;
        this.using = using;
        this.matches = matches;
    }
    appendTo = (ctx) => {
        let newCtx = ctx.makeReference();
        const value = this.on.get();
        let key = value[this.using];
        let derived = this.on.map(v => v);
        let renderable = makeRenderable(this.matches[key](derived));
        let clear = renderable.appendTo(newCtx);
        const cancel = this.on.subscribe(newValue => {
            const newKey = newValue[this.using];
            if (newKey === key)
                return;
            newCtx.requestClear(true, () => {
                clear(true);
                derived.clean();
                key = newKey;
                derived = this.on.map(v => v);
                newCtx = newCtx.makeReference();
                renderable = makeRenderable(this.matches[key](derived));
                clear = renderable.appendTo(newCtx);
            });
        });
        return (removeTree) => {
            newCtx.requestClear(removeTree, () => {
                cancel();
                derived.clean();
                clear(removeTree);
            });
        };
    };
}
export function Match({ on, using, matches }) {
    return new MatchImpl(on, using, matches);
}
