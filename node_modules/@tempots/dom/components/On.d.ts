import { type Renderable } from '../renderable';
import { type Clear } from '../clean';
import { type DOMContext } from '../dom-context';
export type OnFn<T> = (value: T) => void;
export declare class OnImpl<T> implements Renderable {
    private readonly name;
    private readonly handler;
    constructor(name: string, handler: OnFn<T>);
    readonly appendTo: (ctx: DOMContext) => Clear;
}
export interface OnProps<T> {
    name: string;
    handler: OnFn<T>;
}
export declare function On<T>({ name, handler }: OnProps<T>): Renderable;
