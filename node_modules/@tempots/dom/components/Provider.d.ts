import { type Clear } from '../clean';
import { type DOMContext, type ProviderMark } from '../dom-context';
import { type Renderable } from '../renderable';
import { type JSX } from '../jsx';
export declare class ProviderImpl<T> implements Renderable {
    private readonly mark;
    private readonly provider;
    private readonly children;
    constructor(mark: ProviderMark<T>, provider: T, children: JSX.DOMNode);
    readonly appendTo: (ctx: DOMContext) => Clear;
}
export interface ProviderProps<T> {
    mark: ProviderMark<T>;
    value: T;
    children?: JSX.DOMNode;
}
export declare function Provider<T>({ mark, value, children }: ProviderProps<T>): JSX.DOMNode;
export declare class ConsumerImpl<T> implements Renderable {
    private readonly mark;
    private readonly children;
    constructor(mark: ProviderMark<T>, children: (provider: T) => JSX.DOMNode);
    readonly appendTo: (ctx: DOMContext) => Clear;
}
export interface ConsumerProps<T> {
    mark: ProviderMark<T>;
    children?: (provider: T) => JSX.DOMNode;
}
export declare function Consumer<T>({ mark, children }: ConsumerProps<T>): JSX.DOMNode;
