import { type Signal } from '../prop';
import { type Clear } from '../clean';
import { type DOMContext } from '../dom-context';
import { type Renderable } from '../renderable';
import { type JSX } from '../jsx';
export type AnyKey = string | number | symbol;
export declare class OneOfImpl<T extends [AnyKey, unknown]> implements Renderable {
    private readonly match;
    private readonly cases;
    constructor(match: Signal<T>, cases: {
        [KK in T[0]]: (value: Signal<T[1]>) => JSX.DOMNode;
    });
    readonly appendTo: (ctx: DOMContext) => Clear;
}
export type OneOfProps<T extends [AnyKey, unknown]> = {
    match: Signal<T>;
} & {
    [KK in T[0]]: (value: Signal<T[1]>) => JSX.DOMNode;
};
export declare function OneOf<T extends [AnyKey, unknown]>(props: OneOfProps<T>): JSX.DOMNode;
