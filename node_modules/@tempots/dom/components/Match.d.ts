import { type Signal } from '../prop';
import { type DOMContext } from '../dom-context';
import { type AnyKey } from './OneOf';
import { type JSX } from '../jsx-runtime';
import { type Clear } from '../clean';
export declare class MatchImpl<T extends {
    [_ in K]: any;
}, K extends keyof T> {
    private readonly on;
    private readonly using;
    private readonly matches;
    constructor(on: Signal<T>, using: K, matches: {
        [KIND in T[K]]: (_: Signal<T & {
            [KK in K]: KIND extends T[KK] ? KIND : never;
        }>) => JSX.DOMNode;
    });
    readonly appendTo: (ctx: DOMContext) => Clear;
}
export type MatchProps<T extends {
    [_ in K]: AnyKey;
}, K extends keyof T> = {
    on: Signal<T>;
    using: K;
} & {
    matches: {
        [KIND in T[K]]: (_: Signal<T & {
            [KK in K]: KIND extends T[KK] ? KIND : never;
        }>) => JSX.DOMNode;
    };
};
export declare function Match<T extends {
    [_ in K]: AnyKey;
}, K extends keyof T>({ on, using, matches }: MatchProps<T, K>): JSX.DOMNode;
