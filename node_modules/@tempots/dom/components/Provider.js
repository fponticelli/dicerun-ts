import { makeRenderable } from '../jsx-runtime';
export class ProviderImpl {
    mark;
    provider;
    children;
    constructor(mark, provider, children) {
        this.mark = mark;
        this.provider = provider;
        this.children = children;
    }
    appendTo = (ctx) => {
        const newCtx = ctx.withProvider(this.mark, this.provider);
        const clear = makeRenderable(this.children).appendTo(newCtx);
        return (removeTree) => {
            newCtx.requestClear(removeTree, () => {
                clear(removeTree);
            });
        };
    };
}
export function Provider({ mark, value, children }) {
    return new ProviderImpl(mark, value, children);
}
export class ConsumerImpl {
    mark;
    children;
    constructor(mark, children) {
        this.mark = mark;
        this.children = children;
    }
    appendTo = (ctx) => {
        const provider = ctx.getProvider(this.mark);
        if (provider == null) {
            throw new Error('No provider found for mark');
        }
        const clear = makeRenderable(this.children(provider)).appendTo(ctx);
        return (removeTree) => {
            clear(removeTree);
        };
    };
}
export function Consumer({ mark, children }) {
    return new ConsumerImpl(mark, children ?? (() => []));
}
