import { Fragment } from './Fragment';
export class RepeatImpl {
    times;
    children;
    constructor(times, children) {
        this.times = times;
        this.children = children;
    }
    appendTo = (ctx) => {
        const newCtx = ctx.makeReference();
        const count = this.times.get();
        const clears = new Array(count);
        for (let i = 0; i < count; i++) {
            clears[i] = this.children(i).appendTo(newCtx);
        }
        const cancel = this.times.subscribe((newCount) => {
            while (newCount < clears.length) {
                // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
                clears.pop()(true);
            }
            for (let i = clears.length; i < newCount; i++) {
                clears[i] = this.children(i).appendTo(newCtx);
            }
        });
        return (removeTree) => {
            newCtx.requestClear(removeTree, () => {
                cancel();
                clears.forEach(clear => { clear(removeTree); });
            });
        };
    };
}
export function Repeat(props) { return new RepeatImpl(props.times, props.children ?? (() => Fragment({ children: [] }))); }
