export class InnerHTMLImpl {
    html;
    constructor(html) {
        this.html = html;
    }
    appendTo = (ctx) => {
        const el = ctx.getElement();
        const previous = el.innerHTML;
        el.innerHTML = this.html.get() ?? '';
        const cancel = this.html.subscribe(value => {
            el.innerHTML = value ?? '';
        });
        return (removeTree) => {
            cancel();
            if (removeTree) {
                el.innerHTML = previous;
            }
        };
    };
}
export function InnerHTML({ html }) {
    return new InnerHTMLImpl(html);
}
