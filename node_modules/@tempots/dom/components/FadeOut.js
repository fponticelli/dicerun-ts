import { getComputedAnimatable, applyInterpolatedAnimatable } from "./animatable";
export class FadeOutImpl {
    end;
    duration;
    delay;
    constructor(end, duration, delay) {
        this.end = end;
        this.duration = duration;
        this.delay = delay;
    }
    appendTo(ctx) {
        const el = ctx.getElement();
        const { duration, end } = this;
        return ctx.delayClear((removeTree, clear) => {
            const start = getComputedAnimatable(el, this.end);
            const startTime = Date.now() + this.delay;
            function frame() {
                const now = Date.now();
                if (now < startTime) {
                    requestAnimationFrame(frame);
                    return;
                }
                const progress = Math.min((now - startTime) / duration, 1);
                applyInterpolatedAnimatable(el, start, end, progress);
                if (progress < 1) {
                    requestAnimationFrame(frame);
                }
                else {
                    clear();
                }
            }
            requestAnimationFrame(frame);
        });
    }
}
export function FadeOut(props) {
    const { duration, delay, ...end } = props;
    return new FadeOutImpl(end, duration ?? 200, delay ?? 0);
}
