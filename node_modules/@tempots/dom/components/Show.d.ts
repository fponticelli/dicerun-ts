/** @jsxImportSource .. */
import { type Signal } from '../prop';
import { type Renderable } from '../renderable';
import { type JSX } from '../jsx';
import { type Clear } from '../clean';
import { type DOMContext } from '../dom-context';
export type Condition<T> = Signal<T | null | undefined> | Signal<T | undefined> | Signal<T | null> | Signal<T>;
export declare class ShowImpl<T> implements Renderable {
    private readonly on;
    private readonly otherwise;
    private readonly children;
    constructor(on: Condition<T>, otherwise: JSX.DOMNode, children: (value: Signal<NonNullable<T>>) => JSX.DOMNode);
    readonly appendTo: (ctx: DOMContext) => Clear;
}
export interface ShowProps<T> {
    when: Condition<T>;
    otherwise?: JSX.DOMNode;
    children?: (value: Signal<NonNullable<T>>) => JSX.DOMNode;
}
export declare function Show<T>({ when, children, otherwise }: ShowProps<T>): ShowImpl<T>;
