import { Signal } from '../prop';
export function subscribeToSignal(prop, listener, clear) {
    const unsubscribe = prop.subscribe(listener);
    return (removeTree) => {
        unsubscribe();
        clear(removeTree);
    };
}
export class TextImpl {
    text;
    constructor(text) {
        this.text = text;
    }
    appendTo = (ctx) => {
        const [set, clear] = ctx.createText(this.text.get());
        return subscribeToSignal(this.text, set, clear);
    };
}
function propFromChildren(children) {
    if (children instanceof Signal) {
        return children.map((child) => {
            if (child == null) {
                return '';
            }
            return String(child);
        });
    }
    return new Signal(String(children));
}
export function Text({ children }) {
    const prop = propFromChildren(children);
    return new TextImpl(prop);
}
