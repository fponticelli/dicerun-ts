import { getComputedAnimatable, applyInterpolatedAnimatable, applyAnimatable } from "./animatable";
export class FadeInImpl {
    end;
    start;
    duration;
    delay;
    constructor(end, start, duration, delay) {
        this.end = end;
        this.start = start;
        this.duration = duration;
        this.delay = delay;
    }
    appendTo(ctx) {
        const el = ctx.getElement();
        const start = (() => {
            if (this.start != null) {
                applyAnimatable(el, this.start);
                return this.start;
            }
            else {
                return getComputedAnimatable(el, this.end);
            }
        })();
        const startTime = Date.now() + this.delay;
        const { duration, end } = this;
        let nextFrameId = null;
        function frame() {
            const now = Date.now();
            if (now < startTime) {
                nextFrameId = requestAnimationFrame(frame);
                return;
            }
            const progress = Math.min((now - startTime) / duration, 1);
            applyInterpolatedAnimatable(el, start, end, progress);
            if (progress < 1) {
                nextFrameId = requestAnimationFrame(frame);
            }
            else {
                nextFrameId = null;
            }
        }
        frame();
        return (_) => {
            if (nextFrameId != null)
                cancelAnimationFrame(nextFrameId);
        };
    }
}
export function FadeIn(props) {
    const { start, duration, delay, ...end } = props;
    return new FadeInImpl(end, start, duration ?? 200, delay ?? 0);
}
