import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "@tempots/dom/jsx-runtime";
import { Lifecycle, Signal, Prop, FadeIn, FadeOut, When } from '@tempots/dom';
import { computePosition, flip, shift, offset, arrow } from '@floating-ui/dom';
import { Sx } from '../styling/Sx';
export function onTargetOverMount(el, open, close) {
    el.addEventListener('mouseenter', open);
    el.addEventListener('mouseleave', close);
    el.addEventListener('focus', open);
    el.addEventListener('blur', close);
    return () => {
        el.removeEventListener('mouseenter', open);
        el.removeEventListener('mouseleave', close);
        el.removeEventListener('focus', open);
        el.removeEventListener('blur', close);
    };
}
export function onTargetClickMount(el, open, close) {
    el.addEventListener('click', open);
    function clickOutside(e) {
        if (!el.contains(e.target)) {
            close();
        }
    }
    document.addEventListener('click', clickOutside);
    return () => {
        el.removeEventListener('click', open);
        document.removeEventListener('click', clickOutside);
    };
}
export function UnstyledPopover({ children, placement: maybePlacement, shiftPadding: maybeShiftPadding, offset: maybeOffset, arrow: maybeArrow, arrowOver, arrowPadding: maybeArrowPadding, onTargetMount, opened: passedOpened }) {
    let target = null;
    let dropdown = null;
    let arrowElement = null;
    const placement = maybePlacement ?? Signal.of('bottom');
    const shiftPadding = maybeShiftPadding ?? Signal.of(5);
    const offsetValue = maybeOffset ?? Signal.of(5);
    const arrowPadding = maybeArrowPadding ?? Signal.of(0);
    const opened = passedOpened ?? Prop.of(false);
    const placementTop = Prop.of(false);
    function open() { opened.set(true); }
    function close() { opened.set(false); }
    function execute() {
        if ((target == null) || (dropdown == null))
            return;
        const middleware = [];
        if (maybeArrow == null) {
            middleware.push(flip());
        }
        middleware.push(shift({ padding: shiftPadding.get() }), offset(offsetValue.get()));
        if (arrowElement != null) {
            middleware.push(arrow({
                element: arrowElement,
                padding: arrowPadding.get()
            }));
        }
        computePosition(target, dropdown, {
            placement: placement.get(),
            middleware
        }).then(({ x, y, middlewareData, placement }) => {
            if (dropdown == null)
                return;
            placementTop.set(placement.includes('top'));
            dropdown.style.top = `${String(y)}px`;
            dropdown.style.left = `${String(x)}px`;
            if (arrowElement != null && middlewareData.arrow != null) {
                const { x, y } = middlewareData.arrow;
                arrowElement.style.top = y != null ? `${String(y)}px` : '';
                arrowElement.style.left = x != null ? `${String(x)}px` : '';
            }
        });
    }
    let unmountTarget;
    function onMountTarget(element) {
        target = element;
        unmountTarget = onTargetMount?.(element, open, close);
    }
    function onUnmountTarget() {
        target = null;
        unmountTarget?.();
    }
    function onMountArrow(element) {
        arrowElement = element;
    }
    function onUnmountArrow() {
        arrowElement = null;
    }
    function onMountDropdown(element) {
        dropdown = element;
        window.addEventListener('resize', execute);
        execute();
    }
    function onUnmountDropdown() {
        dropdown = null;
        window.removeEventListener('resize', execute);
    }
    return (_jsxs(_Fragment, { children: [_jsx(When, { is: opened, children: _jsxs("div", { children: [_jsx(FadeIn, { start: { opacity: 0, translateY: 12 }, opacity: 1, translateY: 0, duration: 250 }), _jsx(FadeOut, { opacity: 0, translateY: 12, duration: 250 }), _jsx(Sx, { sx: { position: 'absolute' } }), _jsx(When, { is: placementTop.map(v => !v && maybeArrow != null), children: _jsxs("div", { children: [_jsx(Sx, { sx: { position: 'absolute', zIndex: (arrowOver ?? false) ? 1 : 0 } }), _jsx(Lifecycle, { onMount: onMountArrow, onUnmount: onUnmountArrow }), maybeArrow] }) }), _jsxs("div", { children: [_jsx(Sx, { sx: { zIndex: (arrowOver ?? false) ? 0 : 1, position: 'relative' } }), children] }), _jsx(When, { is: placementTop.map(v => v && maybeArrow != null), children: _jsxs("div", { children: [_jsx(Sx, { sx: { position: 'absolute', zIndex: (arrowOver ?? false) ? 1 : 0 } }), _jsx(Lifecycle, { onMount: onMountArrow, onUnmount: onUnmountArrow }), maybeArrow] }) }), _jsx(Lifecycle, { onMount: onMountDropdown, onUnmount: onUnmountDropdown })] }) }), _jsx(Lifecycle, { onMount: onMountTarget, onUnmount: onUnmountTarget })] }));
}
