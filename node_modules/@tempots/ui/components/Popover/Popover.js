import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "@tempots/dom/jsx-runtime";
import { Consumer, Signal, Attribute } from '@tempots/dom';
import { UnstyledPopover } from '../Popover';
import { onTargetClickMount, onTargetOverMount } from '../Popover/UnstyledPopover';
import { StyleMarker } from '../StyleProvider/StyleProvider';
import { Sx } from '../styling/Sx';
const ARROW_SIZE = 8;
export function Popover({ children, openStrategy, maxWidth, opened }) {
    return (_jsx(_Fragment, { children: _jsx(Consumer, { mark: StyleMarker, children: ({ styles }) => {
                const at = styles.at('styles').at;
                return (_jsxs(UnstyledPopover, { opened: opened, arrowOver: true, onTargetMount: openStrategy === 'hover' ? onTargetOverMount : onTargetClickMount, placement: Signal.of('bottom'), offset: Signal.of(ARROW_SIZE), arrow: _jsx("div", { children: _jsx(Sx, { sx: {
                                backgroundColor: at('background').at('color'),
                                // boxShadow: at('shadow').at('md') as Signal<any>,
                                border: at('control').map(v => `1px solid ${v.borderColor}`),
                                borderRight: 'none',
                                borderBottom: 'none',
                                marginTop: -ARROW_SIZE / 2,
                                transform: 'rotate(45deg)',
                                width: ARROW_SIZE,
                                height: ARROW_SIZE
                            } }) }), children: [_jsx(Attribute, { name: "role", value: Signal.of('dialog') }), _jsx(Sx, { sx: {
                                maxWidth: (maxWidth ?? Signal.of(240)),
                                height: 'auto',
                                lineHeight: '1em',
                                textAlign: 'center',
                                whiteSpace: 'normal',
                                backgroundColor: at('background').at('color'),
                                color: at('font').at('color'),
                                padding: at('spacing').map(v => `${v.xs}px ${v.md}px`),
                                border: at('control').map(v => `1px solid ${v.borderColor}`),
                                borderRadius: at('border').at('radius').at('md'),
                                boxShadow: at('shadow').at('md')
                            } }), children] }));
            } }) }));
}
