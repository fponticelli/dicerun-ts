import { jsx as _jsx } from "@tempots/dom/jsx-runtime";
import { Signal, ClassName, Consumer } from '@tempots/dom';
import { getSizeOrNull } from '../../styles/size';
import { objectOfPropertiesToSignalOfObject, sxToClassProp } from '../../styles/sx';
import { StyleMarker } from '../StyleProvider/StyleProvider';
const map = {
    m: ['margin'],
    mt: ['marginTop'],
    mr: ['marginRight'],
    mb: ['marginBottom'],
    ml: ['marginLeft'],
    ms: ['marginBlockStart'],
    me: ['marginBlockEnd'],
    mis: ['marginInlineStart'],
    mie: ['marginInlineEnd'],
    p: ['padding'],
    pt: ['paddingTop'],
    pr: ['paddingRight'],
    pb: ['paddingBottom'],
    pl: ['paddingLeft'],
    ps: ['paddingBlockStart'],
    pe: ['paddingBlockEnd'],
    pis: ['paddingInlineStart'],
    pie: ['paddingInlineEnd'],
    mh: ['marginStart', 'marginEnd'],
    mv: ['marginTop', 'marginBottom'],
    ph: ['paddingStart', 'paddingEnd'],
    pv: ['paddingTop', 'paddingBottom']
};
export const Spacing = (props) => {
    return (_jsx(Consumer, { mark: StyleMarker, children: (theme) => {
            const keys = Object.keys(props).filter(k => k !== 'children');
            if (keys.length === 0)
                return null;
            const sx = keys.reduce((acc, k) => {
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const s = Signal.wrap(props[k]).combine(theme.styles, (s, { styles: { spacing } }) => [s, spacing]);
                for (const kk of map[k]) {
                    if (acc[kk] == null) {
                        continue;
                    }
                    // eslint-disable-next-line @typescript-eslint/no-explicit-any
                    acc[kk] = s.map(([v, spacing]) => getSizeOrNull(v, spacing));
                }
                return acc;
            }, {});
            return _jsx(ClassName, { value: sxToClassProp(objectOfPropertiesToSignalOfObject(sx)) });
        } }));
};
