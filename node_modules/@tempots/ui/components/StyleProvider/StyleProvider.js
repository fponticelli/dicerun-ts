import { jsx as _jsx, jsxs as _jsxs } from "@tempots/dom/jsx-runtime";
import { css } from '@emotion/css';
import { Portal, Prop, OnRemove, Provider, makeProviderMark, When } from '@tempots/dom';
import { resetCss } from '../../styles/reset';
import { getRadiusSize, getSize } from '../../styles/size';
import { defaultDarkStyles, defaultLightStyles } from '../../styles/ui-styles';
import { Sx } from '../styling/Sx';
export const StyleMarker = makeProviderMark();
const counter = Prop.of(0);
export const StyleProvider = ({ children }) => {
    const isLight = Prop.of(true);
    const styles = isLight.map(v => {
        if (v) {
            return {
                components: defaultComponentStyle(defaultLightStyles),
                styles: defaultLightStyles
            };
        }
        else {
            return {
                components: defaultComponentStyle(defaultDarkStyles),
                styles: defaultDarkStyles
            };
        }
    });
    counter.update(v => v + 1);
    return (_jsxs(Provider, { value: { styles, isLight }, mark: StyleMarker, children: [_jsx(Sx, { sx: { backgroundColor: styles.map(v => v.styles.background.color) } }), _jsx(When, { is: counter.map(v => v > 0), children: _jsx(Portal, { selector: "head", children: _jsx("style", { children: resetCss }) }) }), children, _jsx(OnRemove, { clear: () => { counter.update(v => v - 1); } })] }));
};
export const defaultComponentStyle = ({ font, border, spacing, background, control }) => {
    return {
        button: {
            root: ({ size, variant, compact }) => {
                const obj = {
                    alignContent: 'center',
                    display: 'inline-flex',
                    alignItems: 'center',
                    fontWeight: 500,
                    fontSize: getSize(size, 'md', font.size),
                    borderRadius: getRadiusSize('md', 'sm', border.radius),
                    border: `1px solid ${control.borderColor}`,
                    backgroundColor: background.color,
                    color: font.color,
                    padding: `0 ${spacing.md / (compact ? 2 : 1)}px`,
                    textShadow: control.accentTextShadow,
                    boxShadow: control.shadow,
                    // minWidth: getSize(size, 'md', control.height),
                    height: getSize(size, 'md', control.height),
                    cursor: 'pointer',
                    fontFamily: font.family.control
                };
                obj[':hover:not([disabled])'] = {
                    backgroundColor: background.inverseColor,
                    color: font.inverseColor
                };
                obj[':focus'] = {
                    outline: `2px solid ${control.focusColor}`,
                    outlineOffset: 0.5
                };
                obj[':active:not([disabled])'] = {
                    transform: 'translateY(2px)'
                };
                obj[':disabled'] = {
                    cursor: 'not-allowed',
                    backgroundColor: background.mutedColor,
                    color: font.mutedColor
                };
                return css(obj);
            },
            content: ({ size, variant, compact }) => {
                return css({
                    minWidth: '1.25em',
                    margin: '0 auto'
                });
            }
        },
        control: {
            root: ({ size, spacing: sp }) => {
                const obj = {
                    display: 'inline-flex',
                    alignItems: 'center',
                    flexDirection: 'row',
                    gap: getSize(sp, 'md', spacing),
                    overflow: 'hidden',
                    lineHeight: getSize(size, 'md', control.height),
                    height: getSize(size, 'md', control.height),
                    fontWeight: 500,
                    padding: '0 2px',
                    fontSize: getSize(size, 'md', font.size),
                    fontFamily: font.family.control,
                    borderRadius: getRadiusSize('md', 'sm', border.radius),
                    border: `1px solid ${control.borderColor}`,
                    backgroundColor: background.color,
                    color: font.color,
                    ':focus-within': {
                        outline: `2px solid ${control.focusColor}`,
                        outlineOffset: 0.5
                    }
                };
                return css(obj);
            }
        }
    };
};
