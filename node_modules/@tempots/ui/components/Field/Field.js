import { jsx as _jsx, jsxs as _jsxs } from "@tempots/dom/jsx-runtime";
import { Consumer, HiddenWhenEmpty, Signal, When } from '@tempots/dom';
import { Box } from '../Box/Box';
import { FieldsetMark } from '../Fieldset/fieldset-context';
const layoutToFlexDirection = (layout) => {
    // TODO: any
    switch (layout) {
        case 'horizontal':
            return 'row';
        case 'vertical':
            return 'column';
    }
};
export const Field = ({ children, ...props }) => {
    return (_jsx(Consumer, { mark: FieldsetMark, children: ({ layout: fsLayout }) => {
            const required = props.required ?? Signal.of(false);
            const layout = props.layout ?? fsLayout;
            const error = props.error;
            const label = Signal.of(props.label);
            const description = props.description;
            const isHorizontal = layout.map(v => v === 'horizontal');
            return (
            // TODO force vertical layout if there is not enough space
            _jsxs(Box, { sx: {
                    display: 'flex',
                    flexDirection: layout.map(layoutToFlexDirection)
                }, children: [_jsxs(Box, { width: isHorizontal.map(v => v ? 200 : undefined), children: [_jsxs(Box
                            // sx={{
                            //   minHeight: isHorizontal.map(v => (v ? ('36px' as any) : undefined)) // TODO
                            // }}
                            , { children: [label, _jsx(When, { is: required, children: _jsx("span", { children: " *" }) })] }), _jsxs(Box, { sx: {
                                    fontSize: '0.8em' // TODO
                                }, children: [_jsx(HiddenWhenEmpty, {}), description] })] }), _jsxs(Box, { sx: {
                            flex: isHorizontal.map(v => (v ? '1 1 auto' : undefined))
                        }, children: [_jsx(Box, { children: children }), _jsxs(Box, { children: [_jsx(HiddenWhenEmpty, {}), error] })] })] }));
        } }));
};
