export declare abstract class Edit<V, I, E> {
    abstract readonly type: 'Input' | 'Error' | 'Value';
}
export declare class Input<I> extends Edit<never, I, never> {
    readonly input: I;
    readonly type: "Input";
    constructor(input: I);
}
export declare class Error<I, E> extends Edit<never, I, E> {
    readonly input: I;
    readonly error: E;
    readonly type: "Error";
    constructor(input: I, error: E);
}
export declare class Value<V> extends Edit<V, never, never> {
    readonly value: V;
    readonly type: "Value";
    constructor(value: V);
}
export type Validate<V, I, E> = (input: Input<I> | Error<I, E>) => Error<I, E> | Value<V>;
