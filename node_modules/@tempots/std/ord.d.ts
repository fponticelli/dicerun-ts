export declare enum Ordering {
    LT = -1,
    EQ = 0,
    GT = 1
}
export type CompareOrd<T> = (a: T, b: T) => Ordering;
export type Compare<T> = (a: T, b: T) => number;
export declare class Ord<T> {
    readonly compare: CompareOrd<T>;
    static fromNumberComparison<T>(compare: (a: T, b: T) => number): Ord<T>;
    constructor(compare: CompareOrd<T>);
    max(a: T, b: T): T;
    min(a: T, b: T): T;
    equals(a: T, b: T): boolean;
    contramap<B>(f: (b: B) => T): Ord<B>;
    inverse(): Ord<T>;
    numberComparison(a0: T, a1: T): number;
}
export declare function fromNumberComparison<A>(f: (a: A, b: A) => number): (a: A, b: A) => Ordering;
