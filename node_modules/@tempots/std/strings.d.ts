/**
 * Utility functions to manipulate string values.
 */
import { Ord } from './ord';
/**
 * Replaces all occurrances of `placeholder` in `subject` with the value `replacement`.
 * @param subject
 * @param placeholder
 * @param replacement
 */
export declare function replace(subject: string, placeholder: string, replacement: string): string;
/**
 * `after` searches for the first occurrance of `searchFor` and returns the text after that.
 * If `searchFor` is not found, an empty string is returned.
 */
export declare function after(value: string, searchFor: string): string;
/**
 * `afterLast` searches for the last occurrance of `searchFor` and returns the text after that.
 * If `searchFor` is not found, an empty string is returned.
 */
export declare function afterLast(value: string, searchFor: string): string;
/**
 * `before` searches for the first occurrance of `searchFor` and returns the text before that.
 * If `searchFor` is not found, an empty string is returned.
 */
export declare function before(value: string, searchFor: string): string;
/**
 * `beforeLast` searches for the last occurrance of `searchFor` and returns the text before that.
 * If `searchFor` is not found, an empty string is returned.
 */
export declare function beforeLast(value: string, searchFor: string): string;
/**
 * `capitalize` returns a string with the first character convert to upper case.
 */
export declare function capitalize(s: string): string;
/**
 * Capitalize the first letter of every word in `value`. If `whiteSpaceOnly` is set to `true`
 * the process is limited to whitespace separated words.
 */
export declare function capitalizeWords(value: string, whiteSpaceOnly?: boolean): string;
/**
 * Replaces occurrances of `\r\n`, `\n\r`, `\r` with `\n`
 */
export declare function canonicalizeNewlines(value: string): string;
/**
 * Compares two strings ignoring their case.
 */
export declare function compareCaseInsensitive(a: string, b: string): number;
export declare function endsWith(s: string, end: string): boolean;
export declare function endsWithCaseInsensitive(s: string, end: string): boolean;
export declare function startsWith(s: string, start: string): boolean;
export declare function startsWithCaseInsensitive(s: string, start: string): boolean;
/**
 * Compares a string `s` with many `values` and see if one of them matches its end ignoring their case.
 */
export declare function endsWithAnyCaseInsensitive(s: string, values: string[]): boolean;
/**
 * Compares a string `s` with many `values` and see if one of them matches its beginning ignoring their case.
 */
export declare function startsWithAnyCaseInsensitive(s: string, values: string[]): boolean;
/**
 * It cleans up all the whitespaces in the passed `value`. `collapse` does the following:
 * - remove trailing/leading whitespaces
 * - within the string, it collapses seqeunces of whitespaces into a single space character
 * For whitespaces in this description, it is intended to be anything that is matched by the regular expression `\s`.
 */
export declare function collapse(value: string): string;
/**
 * It compares to string and it returns a negative number if `a` is inferior to `b`, zero if they are the same,
 * or otherwise a positive non-sero number.
 */
export declare function compare(a: string, b: string): number;
export declare const order: Ord<string>;
/**
 * `contains` returns `true` if `s` contains one or more occurrences of `test` regardless of the text case.
 */
export declare function containsCaseInsensitive(s: string, test: string): boolean;
/**
 * `contains` returns `true` if `s` contains one or more occurrences of `test`.
 */
export declare function contains(s: string, test: string): boolean;
/**
 * Return the number of occurances of `test` in `s`.
 */
export declare function count(s: string, test: string): number;
/**
 * `contains` returns `true` if `s` contains any of the strings in `tests` regardless of the text case
 */
export declare function containsAnyCaseInsensitive(s: string, tests: string[]): boolean;
/**
 * `contains` returns `true` if `s` contains any of the strings in `tests`
 */
export declare function containsAny(s: string, tests: string[]): boolean;
/**
 * `contains` returns `true` if `s` contains all of the strings in `tests` regardless of the text case
 */
export declare function containsAllCaseInsensitive(s: string, tests: string[]): boolean;
/**
 * `contains` returns `true` if `s` contains all of the strings in `tests`
 */
export declare function containsAll(s: string, tests: string[]): boolean;
/**
 * `dasherize` replaces all the occurrances of `_` with `-`
 */
export declare function dasherize(s: string): string;
/**
 * Compares strings `a` and `b` and returns the position where they differ.
 * ```ts
 * diffIndex('abcdef', 'abc123') // returns 3
 * ```
 */
export declare function diffIndex(a: string, b: string): number;
/**
 * `ellipsis` truncates `s` at len `maxlen` replaces the last characters with the content
 * of `symbol`.
 * ```ts
 * ellipsis('tempo is a nice library', 9) // returns 'tempo is …'
 * ```
 */
export declare function ellipsis(s: string, maxlen?: number, symbol?: string): string;
/**
 * Same as `ellipsis` but puts the symbol in the middle of the string and not to the end.
 * ```ts
 * ellipsisMiddle('tempo is a nice library', 18) // returns 'tempo is … library'
 * ```
 */
export declare function ellipsisMiddle(s: string, maxlen?: number, symbol?: string): string;
/**
 * Returns `true` if `s` ends with any of the values in `values`.
 */
export declare function endsWithAny(s: string, values: string[]): boolean;
/**
 * `filter` applies `predicate` character by character to `s` and it returns a filtered
 * version of the string.
 */
export declare function filter(s: string, predicate: (s: string) => boolean): string;
/**
 * Same as `filter` but `predicate` operates on integer char codes instead of string characters.
 */
export declare function filterCharcode(s: string, predicate: (n: number) => boolean): string;
/**
 * `from` searches for the first occurrance of `searchFor` and returns the text from that point on.
 * If `searchFor` is not found, an empty string is returned.
 */
export declare function from(value: string, searchFor: string): string;
export declare function hashCode(value: string, seed?: number): number;
/**
 * Returns `true` if `value` is not `null` and contains at least one character.
 */
export declare function hasContent(value: string): boolean;
/**
 * Works the same as `underscore` but also replaces underscores with whitespaces.
 */
export declare function humanize(s: string): string;
/**
 * Checks if `s` contains only (and at least one) alphabetical characters.
 */
export declare function isAlpha(s: string): boolean;
/**
 * `isAlphaNum` returns `true` if the string only contains alpha-numeric characters.
 */
export declare function isAlphaNum(value: string): boolean;
export declare function isBreakingWhitespace(value: string): boolean;
/**
 * Returns `true` if the value string is composed of only lower cased characters
 * or case neutral characters.
 */
export declare function isLowerCase(value: string): boolean;
/**
 * Returns `true` if the value string is composed of only upper cased characters
 * or case neutral characters.
 */
export declare function isUpperCase(value: string): boolean;
/**
 * `ifEmpty` returns `value` if it is neither `null` or empty, otherwise it returns `alt`
 */
export declare function ifEmpty(value: string, alt: string): string;
/**
 * `isDigitsOnly` returns `true` if the string only contains digits.
 */
export declare function isDigitsOnly(value: string): boolean;
/**
 * `isEmpty` returns true if either `value` is null or is an empty string.
 */
export declare function isEmpty(value: string): boolean;
/**
 * Convert first letter in `value` to lower case.
 */
export declare function lowerCaseFirst(value: string): string;
/**
 * Returns a random substring from the `value` argument. The length of such value is by default `1`.
 */
export declare function random(value: string, length?: number): string;
/**
 * Returns a random sampling of the specified length from the seed string.
 */
export declare function randomSequence(alphabet: string, length: number): string;
/**
 * Like `randomSequence`, but automatically uses the base64 sequence as the seed string.
 */
export declare function randomSequence64(length: number): string;
/**
 * It maps a string character by character using `callback`.
 */
export declare function map<T>(callback: (c: string) => T, value: string): T[];
/**
 * If present, it removes all the occurrences of `toremove` from `value`.
 */
export declare function remove(value: string, toremove: string): string;
/**
 * If present, it removes the `toremove` text from the end of `value`.
 */
export declare function removeAfter(value: string, toremove: string): string;
/**
 * Removes a slice from `index` to `index + length` from `value`.
 */
export declare function removeAt(value: string, index: number, length: number): string;
/**
 * If present, it removes the `toremove` text from the beginning of `value`.
 */
export declare function removeBefore(value: string, toremove: string): string;
/**
 * If present, it removes the first occurrence of `toremove` from `value`.
 */
export declare function removeOne(value: string, toremove: string): string;
/**
 * `repeat` builds a new string by repeating the argument `s`, n `times`.
 * ```ts
 * repeat('Xy', 3) // generates 'XyXyXy'
 * ```
 */
export declare function repeat(s: string, times: number): string;
/**
 * Returns a new string whose characters are in reverse order.
 */
export declare function reverse(s: string): string;
/**
 * Converts a string in a quoted string.
 */
export declare function quote(s: string): string;
/**
 * It only splits on the first occurrance of separator.
 */
export declare function splitOnce(s: string, separator: string): [string] | [string, string];
/**
 * Returns `true` if `s` starts with any of the values in `values`.
 */
export declare function startsWithAny(s: string, values: string[]): boolean;
/**
 * `stripTags` removes any HTML/XML markup from the string leaving only the concatenation
 * of the existing text nodes.
 */
export declare function stripTags(s: string): string;
/**
 * Surrounds a string with the contents of `left` and `right`. If `right` is omitted,
 * `left` will be used on both sides
 */
export declare function surround(s: string, left: string, right?: string): string;
/**
 * It transforms a string into an `Array` of characters.
 */
export declare function toArray(s: string): string[];
/**
 * It transforms a string into an `Array` of char codes in integer format.
 */
export declare function toCharcodes(s: string): number[];
/**
 * Returns an array of `string` whose elements are equally long (using `len`). If the string `s`
 * is not exactly divisible by `len` the last element of the array will be shorter.
 */
export declare function toChunks(s: string, len: number): string[];
/**
 * Returns an array of `string` split by line breaks.
 */
export declare function toLines(s: string): string[];
/**
 * `trimChars` removes from the beginning and the end of the string any character that is present in `charlist`.
 */
export declare function trimChars(value: string, charlist: string): string;
/**
 * `trimCharsLeft` removes from the beginning of the string any character that is present in `charlist`.
 */
export declare function trimCharsLeft(value: string, charlist: string): string;
/**
 * `trimCharsRight` removes from the end of the string any character that is present in `charlist`.
 */
export declare function trimCharsRight(value: string, charlist: string): string;
/**
 * `underscore` finds UpperCase characters and turns them into LowerCase and prepends them with a whtiespace.
 * Sequences of more than one UpperCase character are left untouched.
 */
export declare function underscore(s: string): string;
/**
 * Convert first letter in `value` to upper case.
 */
export declare function upperCaseFirst(value: string): string;
/**
 * `upTo` searches for the first occurrance of `searchFor` and returns the text up to that point.
 * If `searchFor` is not found, the entire string is returned.
 */
export declare function upTo(value: string, searchFor: string): string;
/**
 * `wrapColumns` splits a long string into lines that are at most `columns` long.
 * Words whose length exceeds `columns` are not split.
 */
export declare function wrapColumns(s: string, columns?: number, indent?: string, newline?: string): string;
export declare function isSpaceAt(s: string, pos: number): boolean;
export declare function encodeBase64(s: string): string;
export declare function decodeBase64(s: string): string;
export declare function wrapLine(s: string, columns: number, indent: string, newline: string): string;
export declare function lpad(s: string, char: string, length: number): string;
export declare function rpad(s: string, char: string, length: number): string;
export declare function splitOnLast(s: string, find: string): [string] | [string, string];
export declare function splitOnFirst(s: string, find: string): [string] | [string, string];
