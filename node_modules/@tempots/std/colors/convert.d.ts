import { CMYK } from './cmyk';
import { HSL } from './hsl';
import { HSLuv } from './hsluv';
import { HSV } from './hsv';
import { LAB } from './lab';
import { LCH } from './lch';
import { LUV } from './luv';
import { RGB } from './rgb';
import { SRGB } from './srgb';
import { XYZ } from './xyz';
export declare const WHITE_REFERENCE: [number, number, number];
export declare const Direct: {
    cmyk2rgb([c, m, y, k]: [c: number, m: number, y: number, k: number]): [
        number,
        number,
        number
    ];
    hsl2hsv([h, s, l]: [h: number, s: number, l: number]): [
        number,
        number,
        number
    ];
    hsv2hsl([h, s, v]: [h: number, s: number, v: number]): [
        number,
        number,
        number
    ];
    hsl2rgb([h, s, l]: [h: number, s: number, l: number]): [
        number,
        number,
        number
    ];
    lab2lch([l, a, b]: [l: number, a: number, b: number]): [
        number,
        number,
        number
    ];
    lab2xyz([l, a, b]: [l: number, a: number, b: number], [rx, ry, rz]: [number, number, number]): [number, number, number];
    lch2lab([l, c, h]: [l: number, c: number, h: number]): [
        number,
        number,
        number
    ];
    luv2xyz([l, u, v]: [l: number, u: number, v: number], [rx, ry, rz]: [number, number, number]): [number, number, number];
    rgb2cmyk([r, g, b]: [r: number, g: number, b: number]): [
        number,
        number,
        number,
        number
    ];
    rgb2hsl([r, g, b]: [r: number, g: number, b: number]): [
        number,
        number,
        number
    ];
    rgb2xyz([r, g, b]: [r: number, g: number, b: number]): [
        number,
        number,
        number
    ];
    xyz2lab([x, y, z]: [number, number, number], [rx, ry, rz]: [number, number, number]): [number, number, number];
    xyz2luv([x, y, z]: [number, number, number], [rx, ry, rz]: [number, number, number]): [number, number, number];
    xyz2rgb([x, y, z]: [number, number, number]): [number, number, number];
    hsluv2lch: ([h, s, l]: [number, number, number]) => [
        number,
        number,
        number
    ];
    lch2hsluv: ([l, c, h]: [number, number, number]) => [
        number,
        number,
        number
    ];
};
export declare const Channel: {
    cmyk2hsl: (cmyk: [number, number, number, number]) => [number, number, number];
    cmyk2hsluv: (cmyk: [number, number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    cmyk2hsv: (cmyk: [number, number, number, number]) => [number, number, number];
    cmyk2lab: (cmyk: [number, number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    cmyk2lch: (cmyk: [number, number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    cmyk2luv: (cmyk: [number, number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    cmyk2xyz: (cmyk: [number, number, number, number]) => [number, number, number];
    hsl2cmyk: (hsl: [number, number, number]) => [number, number, number, number];
    hsl2lab: (hsl: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsl2hsluv: (hsl: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsl2lch: (hsl: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsl2luv: (hsl: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsl2xyz: (hsl: [number, number, number]) => [number, number, number];
    hsluv2cmyk: (hsluv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number, number];
    hsluv2hsl: (hsluv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsluv2lab: (hsluv: [number, number, number]) => [number, number, number];
    hsluv2luv(hsluv: [number, number, number], whiteReference: [number, number, number]): [number, number, number];
    hsluv2hsv(hsluv: [number, number, number], whiteReference: [number, number, number]): [number, number, number];
    hsluv2rgb(hsluv: [number, number, number], whiteReference: [number, number, number]): [number, number, number];
    hsluv2xyz: (hsluv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsv2cmyk: (hsv: [number, number, number]) => [number, number, number, number];
    hsv2hsluv: (hsv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsv2lab: (hsv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsv2lch: (hsv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsv2luv: (hsv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    hsv2rgb: (hsv: [number, number, number]) => [number, number, number];
    hsv2xyz: (hsv: [number, number, number]) => [number, number, number];
    lab2cmyk: (lab: [number, number, number], whiteReference: [number, number, number]) => [number, number, number, number];
    lab2hsl: (lab: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    lab2hsluv: (lab: [number, number, number]) => [number, number, number];
    lab2hsv: (lab: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    lab2luv: (lab: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    lab2rgb: (lab: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    lch2cmyk: (lch: [number, number, number], whiteReference: [number, number, number]) => [number, number, number, number];
    lch2hsl: (lch: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    lch2hsv: (lch: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    lch2luv: (lch: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    lch2rgb: (lch: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    lch2xyz: (lch: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    luv2cmyk: (luv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number, number];
    luv2hsl: (luv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    luv2hsluv: (luv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    luv2hsv: (luv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    luv2lab: (luv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    luv2lch: (luv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    luv2rgb: (luv: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    rgb2hsluv: (rgb: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    rgb2hsv: (rgb: [number, number, number]) => [number, number, number];
    rgb2lab: (rgb: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    rgb2lch: (rgb: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    rgb2luv: (rgb: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    xyz2cmyk: (xyz: [number, number, number]) => [number, number, number, number];
    xyz2hsl: (xyz: [number, number, number]) => [number, number, number];
    xyz2hsluv: (xyz: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    xyz2hsv: (xyz: [number, number, number]) => [number, number, number];
    xyz2lch: (xyz: [number, number, number], whiteReference: [number, number, number]) => [number, number, number];
    cmyk2rgb([c, m, y, k]: [c: number, m: number, y: number, k: number]): [
        number,
        number,
        number
    ];
    hsl2hsv([h, s, l]: [h: number, s: number, l: number]): [
        number,
        number,
        number
    ];
    hsv2hsl([h, s, v]: [h: number, s: number, v: number]): [
        number,
        number,
        number
    ];
    hsl2rgb([h, s, l]: [h: number, s: number, l: number]): [
        number,
        number,
        number
    ];
    lab2lch([l, a, b]: [l: number, a: number, b: number]): [
        number,
        number,
        number
    ];
    lab2xyz([l, a, b]: [l: number, a: number, b: number], [rx, ry, rz]: [number, number, number]): [number, number, number];
    lch2lab([l, c, h]: [l: number, c: number, h: number]): [
        number,
        number,
        number
    ];
    luv2xyz([l, u, v]: [l: number, u: number, v: number], [rx, ry, rz]: [number, number, number]): [number, number, number];
    rgb2cmyk([r, g, b]: [r: number, g: number, b: number]): [
        number,
        number,
        number,
        number
    ];
    rgb2hsl([r, g, b]: [r: number, g: number, b: number]): [
        number,
        number,
        number
    ];
    rgb2xyz([r, g, b]: [r: number, g: number, b: number]): [
        number,
        number,
        number
    ];
    xyz2lab([x, y, z]: [number, number, number], [rx, ry, rz]: [number, number, number]): [number, number, number];
    xyz2luv([x, y, z]: [number, number, number], [rx, ry, rz]: [number, number, number]): [number, number, number];
    xyz2rgb([x, y, z]: [number, number, number]): [number, number, number];
    hsluv2lch: ([h, s, l]: [number, number, number]) => [
        number,
        number,
        number
    ];
    lch2hsluv: ([l, c, h]: [number, number, number]) => [
        number,
        number,
        number
    ];
};
export declare function cmyk2luv(cmyk: CMYK, whiteReference?: [number, number, number]): LUV;
export declare function cmyk2hsl(cmyk: CMYK): HSL;
export declare function cmyk2hsluv(cmyk: CMYK, whiteReference?: [number, number, number]): HSLuv;
export declare function cmyk2hsv(cmyk: CMYK): HSV;
export declare function cmyk2lab(cmyk: CMYK, whiteReference?: [number, number, number]): LAB;
export declare function cmyk2lch(cmyk: CMYK, whiteReference?: [number, number, number]): LCH;
export declare function cmyk2rgb(cmyk: CMYK): RGB;
export declare function cmyk2srgb(cmyk: CMYK): SRGB;
export declare function cmyk2xyz(cmyk: CMYK): XYZ;
export declare function hsl2cmyk(hsl: HSL): CMYK;
export declare function hsl2hsluv(hsl: HSL, whiteReference?: [number, number, number]): HSLuv;
export declare function hsl2luv(hsl: HSL, whiteReference?: [number, number, number]): LUV;
export declare function hsl2hsv(hsl: HSL): HSV;
export declare function hsl2lab(hsl: HSL, whiteReference?: [number, number, number]): LAB;
export declare function hsl2lch(hsl: HSL, whiteReference?: [number, number, number]): LCH;
export declare function hsl2rgb(hsl: HSL): RGB;
export declare function hsl2srgb(hsl: HSL): SRGB;
export declare function hsl2xyz(hsl: HSL): XYZ;
export declare function hsluv2cmyk(hsluv: HSLuv, whiteReference?: [number, number, number]): CMYK;
export declare function hsluv2hsl(hsluv: HSLuv, whiteReference?: [number, number, number]): HSL;
export declare function hsluv2luv(hsluv: HSLuv, whiteReference?: [number, number, number]): LUV;
export declare function hsluv2hsv(hsluv: HSLuv, whiteReference?: [number, number, number]): HSV;
export declare function hsluv2lab(hsluv: HSLuv): LAB;
export declare function hsluv2lch(hsluv: HSLuv): LCH;
export declare function hsluv2rgb(hsluv: HSLuv, whiteReference?: [number, number, number]): RGB;
export declare function hsluv2srgb(hsluv: HSLuv, whiteReference?: [number, number, number]): SRGB;
export declare function hsluv2xyz(hsluv: HSLuv, whiteReference?: [number, number, number]): XYZ;
export declare function hsv2cmyk(hsv: HSV): CMYK;
export declare function hsv2hsl(hsv: HSV): HSL;
export declare function hsv2hsluv(hsv: HSV, whiteReference?: [number, number, number]): HSLuv;
export declare function hsv2lab(hsv: HSV, whiteReference?: [number, number, number]): LAB;
export declare function hsv2lch(hsv: HSV, whiteReference?: [number, number, number]): LCH;
export declare function hsv2luv(hsv: HSV, whiteReference?: [number, number, number]): LUV;
export declare function hsv2rgb(hsv: HSV): RGB;
export declare function hsv2srgb(hsv: HSV): SRGB;
export declare function hsv2xyz(hsv: HSV): XYZ;
export declare function lab2cmyk(lab: LAB, whiteReference?: [number, number, number]): CMYK;
export declare function lab2hsl(lab: LAB, whiteReference?: [number, number, number]): HSL;
export declare function lab2hsluv(lab: LAB): HSLuv;
export declare function lab2hsv(lab: LAB, whiteReference?: [number, number, number]): HSV;
export declare function lab2lch(lab: LAB): LCH;
export declare function lab2luv(lab: LAB, whiteReference?: [number, number, number]): LUV;
export declare function lab2rgb(lab: LAB, whiteReference?: [number, number, number]): RGB;
export declare function lab2srgb(lab: LAB, whiteReference?: [number, number, number]): SRGB;
export declare function lab2xyz(lab: LAB, whiteReference?: [number, number, number]): XYZ;
export declare function lch2cmyk(lch: LCH, whiteReference?: [number, number, number]): CMYK;
export declare function lch2hsl(lch: LCH, whiteReference?: [number, number, number]): HSL;
export declare function lch2hsluv(lch: LCH): HSLuv;
export declare function lch2hsv(lch: LCH, whiteReference?: [number, number, number]): HSV;
export declare function lch2lab(lch: LCH): LAB;
export declare function lch2luv(lch: LCH, whiteReference?: [number, number, number]): LUV;
export declare function lch2rgb(lch: LCH, whiteReference?: [number, number, number]): RGB;
export declare function lch2srgb(lch: LCH, whiteReference?: [number, number, number]): SRGB;
export declare function lch2xyz(lch: LCH, whiteReference?: [number, number, number]): XYZ;
export declare function luv2cmyk(luv: LUV, whiteReference?: [number, number, number]): CMYK;
export declare function luv2hsl(luv: LUV, whiteReference?: [number, number, number]): HSL;
export declare function luv2hsluv(luv: LUV, whiteReference?: [number, number, number]): HSLuv;
export declare function luv2hsv(luv: LUV, whiteReference?: [number, number, number]): HSV;
export declare function luv2lab(luv: LUV, whiteReference?: [number, number, number]): LAB;
export declare function luv2lch(luv: LUV, whiteReference?: [number, number, number]): LCH;
export declare function luv2rgb(luv: LUV, whiteReference?: [number, number, number]): RGB;
export declare function luv2srgb(luv: LUV, whiteReference?: [number, number, number]): SRGB;
export declare function luv2xyz(luv: LUV, whiteReference?: [number, number, number]): XYZ;
export declare function rgb2cmyk(rgb: RGB): CMYK;
export declare function rgb2hsl(rgb: RGB): HSL;
export declare function rgb2hsluv(rgb: RGB, whiteReference?: [number, number, number]): HSLuv;
export declare function rgb2hsv(rgb: RGB): HSV;
export declare function rgb2lab(rgb: RGB, whiteReference?: [number, number, number]): LAB;
export declare function rgb2lch(rgb: RGB, whiteReference?: [number, number, number]): LCH;
export declare function rgb2luv(rgb: RGB, whiteReference?: [number, number, number]): LUV;
export declare function rgb2srgb(rgb: RGB): SRGB;
export declare function rgb2xyz(rgb: RGB): XYZ;
export declare function srgb2cmyk(srgb: SRGB): CMYK;
export declare function srgb2hsv(srgb: SRGB): HSV;
export declare function srgb2hsl(srgb: SRGB): HSL;
export declare function srgb2hsluv(srgb: SRGB, whiteReference?: [number, number, number]): HSLuv;
export declare function srgb2lab(srgb: SRGB, whiteReference?: [number, number, number]): LAB;
export declare function srgb2lch(srgb: SRGB, whiteReference?: [number, number, number]): LCH;
export declare function srgb2luv(srgb: SRGB, whiteReference?: [number, number, number]): LUV;
export declare function srgb2rgb(srgb: SRGB): RGB;
export declare function srgb2xyz(srgb: SRGB): XYZ;
export declare function xyz2cmyk(xyz: XYZ): CMYK;
export declare function xyz2hsl(xyz: XYZ): HSL;
export declare function xyz2hsluv(xyz: XYZ, whiteReference?: [number, number, number]): HSLuv;
export declare function xyz2hsv(xyz: XYZ): HSV;
export declare function xyz2lab(xyz: XYZ, whiteReference?: [number, number, number]): LAB;
export declare function xyz2lch(xyz: XYZ, whiteReference?: [number, number, number]): LCH;
export declare function xyz2luv(xyz: XYZ, whiteReference?: [number, number, number]): LUV;
export declare function xyz2rgb(xyz: XYZ): RGB;
export declare function xyz2srgb(xyz: XYZ): SRGB;
