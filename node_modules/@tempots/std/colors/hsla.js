import { clamp, nearEquals } from '../numbers';
import { HSL } from './hsl';
const TOLLERANCE = 0.0001;
export class HSLA extends HSL {
    alpha;
    /**
     *
     * @param hue Angle in degrees (0-360)
     * @param saturation Percentage (0-100)
     * @param lightness Percentage (0-100)
     * @param alpha Percentage (0-100)
     */
    constructor(hue, saturation = 50, lightness = 50, alpha = 100) {
        super(hue, saturation, lightness);
        this.alpha = clamp(0, 1, alpha);
    }
    withHue(hue) {
        return new HSLA(hue, this.saturation, this.lightness, this.alpha);
    }
    withSaturation(saturation) {
        return new HSLA(this.hue, saturation, this.lightness, this.alpha);
    }
    withLightness(lightness) {
        return new HSLA(this.hue, this.saturation, lightness, this.alpha);
    }
    withAlpha(alpha) {
        return new HSLA(this.hue, this.saturation, this.lightness, alpha);
    }
    toString() {
        return `hsla(${this.hue}deg, ${this.saturation}%, ${this.lightness}%, ${this.alpha / 100})`;
    }
    equals(other, tollerance = TOLLERANCE) {
        return super.equals(other, tollerance) && nearEquals(this.alpha, other.alpha, tollerance);
    }
}
