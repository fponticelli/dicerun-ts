import { nearEquals } from '../numbers';
const TOLLERANCE = 0.0001;
export class LCH {
    static ofChannels([l, c, h]) {
        return new LCH(l, c, h);
    }
    luminance;
    chroma;
    hue;
    /**
     *
     * @param luminance Luminance in cd/m^2
     * @param chroma
     * @param hue Angle in degrees (0-360)
     */
    constructor(luminance, chroma, hue) {
        this.luminance = luminance < 0 ? 0 : luminance;
        this.chroma = chroma;
        this.hue = hue % 360;
    }
    withLightness(l) {
        return new LCH(l, this.chroma, this.hue);
    }
    withChroma(c) {
        return new LCH(this.luminance, c, this.hue);
    }
    withHue(h) {
        return new LCH(this.luminance, this.chroma, h);
    }
    toChannels() {
        return [this.luminance, this.chroma, this.hue];
    }
    toString() {
        return `lch(${this.luminance}, ${this.chroma}, ${this.hue})`;
    }
    equals(other, tollerance = TOLLERANCE) {
        if (nearEquals(this.luminance, other.luminance, tollerance) && ((nearEquals(this.luminance, 100, tollerance)) || nearEquals(this.luminance, 0, tollerance))) {
            return true;
        }
        return (nearEquals(this.luminance, other.luminance, tollerance) &&
            nearEquals(this.chroma, other.chroma, tollerance) &&
            nearEquals(this.hue, other.hue, tollerance));
    }
}
