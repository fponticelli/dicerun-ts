// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Result = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    success(value) {
        return { type: 'success', value };
    },
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    failure(error) {
        return { type: 'failure', error };
    },
    cmap: (f) => (r) => {
        if (r.type === 'success') {
            return Result.success(f(r.value));
        }
        else {
            return r;
        }
    },
    map: (r, f) => {
        if (r.type === 'success') {
            return Result.success(f(r.value));
        }
        else {
            return r;
        }
    },
    cflatMap: (f) => (r) => {
        if (r.type === 'success') {
            return f(r.value);
        }
        else {
            return r;
        }
    },
    flatMap: (r, f) => {
        if (r.type === 'success') {
            return f(r.value);
        }
        else {
            return r;
        }
    },
    toAsync(r) {
        return r;
    },
    isSuccess(r) {
        return r.type === 'success';
    },
    isFailure(r) {
        return r.type === 'failure';
    },
    getOrElse(r, alt) {
        return Result.isSuccess(r) ? r.value : alt;
    },
    getOrElseLazy(r, altf) {
        return Result.isSuccess(r) ? r.value : altf();
    },
    getOrNull(r) {
        return Result.isSuccess(r) ? r.value : null;
    },
    getOrUndefined(r) {
        return Result.isSuccess(r) ? r.value : undefined;
    },
    cmatch: (success, failure) => (r) => {
        if (Result.isSuccess(r)) {
            return success(r.value);
        }
        else {
            return failure(r.error);
        }
    },
    match: (r, success, failure) => {
        if (Result.isSuccess(r)) {
            return success(r.value);
        }
        else {
            return failure(r.error);
        }
    },
    whenSuccess: (apply) => (r) => {
        if (Result.isSuccess(r)) {
            apply(r.value);
        }
        return r;
    },
    whenFailure: (apply) => (r) => {
        if (Result.isFailure(r)) {
            apply(r.error);
        }
        return r;
    },
    combine: (r1, r2, combineV, combineE) => Result.match(r1, (v1) => Result.match(r2, (v2) => Result.success(combineV(v1, v2)), (e2) => Result.failure(e2)), (e1) => Result.match(r2, 
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    (_) => Result.failure(e1), (e2) => Result.failure(combineE(e1, e2))))
};
