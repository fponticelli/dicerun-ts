import { Result } from './result';
// eslint-disable-next-line @typescript-eslint/no-redeclare
export const Validation = {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    valid: { type: 'valid' },
    invalid(error) {
        return { type: 'invalid', error };
    },
    isValid(r) {
        return r.type === 'valid';
    },
    isInvalid(r) {
        return r.type === 'invalid';
    },
    cmatch: (valid, invalid) => (r) => {
        if (Validation.isValid(r)) {
            return valid();
        }
        else {
            return invalid(r.error);
        }
    },
    match: (r, valid, invalid) => {
        if (Validation.isValid(r)) {
            return valid();
        }
        else {
            return invalid(r.error);
        }
    },
    toResult: (value) => Validation.cmatch(() => Result.success(value), (err) => Result.failure(err)),
    whenValid: (apply) => (r) => {
        if (Validation.isValid(r)) {
            apply();
        }
        return r;
    },
    whenInvalid: (apply) => (r) => {
        if (Validation.isInvalid(r)) {
            apply(r.error);
        }
        return r;
    }
};
