import { Result } from './result';
export interface Valid {
    type: 'valid';
}
export interface Invalid<E> {
    type: 'invalid';
    error: E;
}
export type Validation<E> = Valid | Invalid<E>;
export type PromiseValidation<E> = PromiseLike<Validation<E>>;
export declare const Validation: {
    valid: {
        type: "valid";
    };
    invalid<E>(error: E): Validation<E>;
    isValid<E_1>(r: Validation<E_1>): r is Valid;
    isInvalid<E_2>(r: Validation<E_2>): r is Invalid<E_2>;
    cmatch: <V, E_3>(valid: () => V, invalid: (error: E_3) => V) => (r: Validation<E_3>) => V;
    match: <V_1, E_4>(r: Validation<E_4>, valid: () => V_1, invalid: (error: E_4) => V_1) => V_1;
    toResult: <T, E_5>(value: T) => (validation: Validation<E_5>) => Result<T, E_5>;
    whenValid: <E_6>(apply: () => void) => (r: Validation<E_6>) => Validation<E_6>;
    whenInvalid: <E_7>(apply: (e: E_7) => void) => (r: Validation<E_7>) => Validation<E_7>;
};
