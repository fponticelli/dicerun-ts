// eslint-disable-next-line @typescript-eslint/no-redeclare
export const AsyncResult = {
    idle: { type: 'idle' },
    loading: { type: 'loading' },
    success(value) {
        return { type: 'success', value };
    },
    failure(error) {
        return { type: 'failure', error };
    },
    isSuccess(r) {
        return r.type === 'success';
    },
    isFailure(r) {
        return r.type === 'failure';
    },
    isIdle(r) {
        return r.type === 'idle';
    },
    isLoading(r) {
        return r.type === 'loading';
    },
    getOrElse(r, alt) {
        return AsyncResult.isSuccess(r) ? r.value : alt;
    },
    getOrElseLazy(r, altf) {
        return AsyncResult.isSuccess(r) ? r.value : altf();
    },
    getOrNull(r) {
        return AsyncResult.isSuccess(r) ? r.value : null;
    },
    getOrUndefined(r) {
        return AsyncResult.isSuccess(r) ? r.value : undefined;
    },
    cmatch: (success, failure, loading, idle = loading) => (r) => {
        if (AsyncResult.isSuccess(r)) {
            return success(r.value);
        }
        else if (AsyncResult.isFailure(r)) {
            return failure(r.error);
        }
        else if (AsyncResult.isIdle(r)) {
            return idle();
        }
        else {
            return loading();
        }
    },
    match: (r, success, failure, loading, idle = loading) => {
        if (AsyncResult.isSuccess(r)) {
            return success(r.value);
        }
        else if (AsyncResult.isFailure(r)) {
            return failure(r.error);
        }
        else if (AsyncResult.isIdle(r)) {
            return idle();
        }
        else {
            return loading();
        }
    },
    whenSuccess: (apply) => (r) => {
        if (AsyncResult.isSuccess(r)) {
            apply(r.value);
        }
        return r;
    },
    whenFailure: (apply) => (r) => {
        if (AsyncResult.isFailure(r)) {
            apply(r.error);
        }
        return r;
    }
};
