/**
 *
 */
import { type Pointer } from './generic';
export type Assert<A extends true> = A extends never ? 'FAIL' : A extends true ? 'PASS' : 'FAIL';
export type AssertNot<A extends false> = A extends never ? 'FAIL' : A extends false ? 'PASS' : 'FAIL';
export type Extends<A, B> = A extends B ? true : false;
export type Same<A, B> = Pointer<A> extends Pointer<B> ? Pointer<B> extends Pointer<A> ? true : false : false;
export type NotSame<A, B> = Pointer<A> extends Pointer<B> ? Pointer<B> extends Pointer<A> ? false : true : true;
export type Equals<A, B> = (<T>() => T extends A ? 1 : 2) extends <T>() => T extends B ? 1 : 2 ? true : false;
export type NotEquals<A, B> = Equals<A, B> extends true ? false : true;
export type IsNever<T> = Pointer<T> extends Pointer<never> ? true : false;
