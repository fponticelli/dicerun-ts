/**
 *
 */
import { type AnyKey } from './utility';
import { type ObjectWithField } from './objects';
import { type Tail } from './tuples';
export type Differentiate<Field extends AnyKey, State extends ObjectWithField<Field, any>, ExpectedType extends State[Field]> = State extends ObjectWithField<Field, ExpectedType> ? State : never;
export type DifferentiateByKind<State extends {
    kind: any;
}, K extends State['kind']> = Differentiate<'kind', State, K>;
export type DifferentiateAt<Path extends AnyKey[], State, ExpectedType> = Path extends [] ? State : Path extends [infer T] ? T extends keyof State ? ExpectedType extends State[T] ? Differentiate<T, State, ExpectedType> : never : never : Path extends [infer K, ...any[]] ? K extends keyof State ? Tail<Path> extends infer Rest ? Rest extends AnyKey[] ? State & {
    [k in K]: DifferentiateAt<Rest, State[k], ExpectedType>;
} : never : never : never : never;
