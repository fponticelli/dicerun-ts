/**
 *
 */
import { type Equals, type NotEquals } from './assert';
export type Pointer<T> = () => T;
export type DeRef<T extends () => any> = T extends () => infer Ret ? Ret : never;
export type WhenEquals<X, Y, A = X, B = never> = Equals<X, Y> extends true ? A : B;
export type WhenNotEquals<X, Y, A = X, B = never> = NotEquals<X, Y> extends true ? A : B;
export type Cast<A, B> = A extends B ? A : B;
