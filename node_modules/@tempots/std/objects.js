export function keys(obj) {
    return Object.keys(obj);
}
export function sameKeys(a, b) {
    const ak = keys(a);
    const bk = keys(b);
    if (ak.length !== bk.length)
        return false;
    for (const k of ak) {
        if (!(k in b))
            return false;
    }
    return true;
}
export function isObject(obj) {
    return Object.prototype.toString.call(obj) === '[object Object]';
}
export function removeFields(ob, ...fields) {
    const ks = keys(ob);
    return ks.reduce((acc, key) => {
        if (!fields.includes(key))
            acc[key] = ob[key];
        return acc;
    }, {});
}
export function merge(a, b) {
    return Object.assign({}, a, b);
}
export function isEmpty(obj) {
    return (obj != null &&
        Object.keys(obj).length === 0 &&
        Object.getPrototypeOf(obj) === Object.prototype);
}
