"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const EventTarget_1 = __importDefault(require("../event/EventTarget"));
const MediaQueryListEvent_1 = __importDefault(require("../event/events/MediaQueryListEvent"));
const MEDIA_REGEXP = /min-width: *([0-9]+) *px|max-width: *([0-9]+) *px|min-height: *([0-9]+) *px|max-height: *([0-9]+) *px/;
/**
 * Media Query List.
 *
 * Reference:
 * https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList.
 */
class MediaQueryList extends EventTarget_1.default {
    /**
     * Constructor.
     *
     * @param ownerWindow Window.
     * @param media Media.
     */
    constructor(ownerWindow, media) {
        super();
        this.media = '';
        this.onchange = null;
        this._ownerWindow = ownerWindow;
        this.media = media;
    }
    /**
     * Returns "true" if the document matches.
     *
     * @returns Matches.
     */
    get matches() {
        const match = MEDIA_REGEXP.exec(this.media);
        if (match) {
            if (match[1]) {
                return this._ownerWindow.innerWidth >= parseInt(match[1]);
            }
            else if (match[2]) {
                return this._ownerWindow.innerWidth <= parseInt(match[2]);
            }
            else if (match[3]) {
                return this._ownerWindow.innerHeight >= parseInt(match[3]);
            }
            else if (match[4]) {
                return this._ownerWindow.innerHeight <= parseInt(match[4]);
            }
        }
        return false;
    }
    /**
     * Adds a listener.
     *
     * @deprecated
     * @param callback Callback.
     */
    addListener(callback) {
        this.addEventListener('change', callback);
    }
    /**
     * Removes listener.
     *
     * @deprecated
     * @param callback Callback.
     */
    removeListener(callback) {
        this.removeEventListener('change', callback);
    }
    /**
     * @override
     */
    addEventListener(type, listener) {
        super.addEventListener(type, listener);
        if (type === 'change') {
            let matchesState = false;
            const resizeListener = () => {
                const matches = this.matches;
                if (matches !== matchesState) {
                    matchesState = matches;
                    this.dispatchEvent(new MediaQueryListEvent_1.default('change', { matches, media: this.media }));
                }
            };
            listener['_windowResizeListener'] = resizeListener;
            this._ownerWindow.addEventListener('resize', resizeListener);
        }
    }
    /**
     * @override
     */
    removeEventListener(type, listener) {
        super.removeEventListener(type, listener);
        if (type === 'change' && listener['_windowResizeListener']) {
            this._ownerWindow.removeEventListener('resize', listener['_windowResizeListener']);
        }
    }
}
exports.default = MediaQueryList;
//# sourceMappingURL=MediaQueryList.js.map