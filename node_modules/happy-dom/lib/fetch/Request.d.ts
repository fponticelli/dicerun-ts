/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import IBlob from '../file/IBlob';
import IDocument from '../nodes/document/IDocument';
import IRequestInit from './types/IRequestInit';
import { URL } from 'url';
import IRequestInfo from './types/IRequestInfo';
import IRequest from './types/IRequest';
import Headers from './Headers';
import AbortSignal from './AbortSignal';
import Stream from 'stream';
import IRequestReferrerPolicy from './types/IRequestReferrerPolicy';
import IRequestRedirect from './types/IRequestRedirect';
import IRequestCredentials from './types/IRequestCredentials';
/**
 * Fetch request.
 *
 * Based on:
 * https://github.com/node-fetch/node-fetch/blob/main/src/request.js
 *
 * @see https://fetch.spec.whatwg.org/#request-class
 */
export default class Request implements IRequest {
    static _ownerDocument: IDocument;
    readonly _ownerDocument: IDocument;
    readonly method: string;
    readonly body: Stream.Readable | null;
    readonly headers: Headers;
    readonly redirect: IRequestRedirect;
    readonly referrerPolicy: IRequestReferrerPolicy;
    readonly signal: AbortSignal;
    readonly bodyUsed: boolean;
    readonly credentials: IRequestCredentials;
    readonly _contentLength: number | null;
    readonly _contentType: string | null;
    _referrer: '' | 'no-referrer' | 'client' | URL;
    readonly _url: URL;
    readonly _bodyBuffer: Buffer | null;
    /**
     * Constructor.
     *
     * @param input Input.
     * @param [init] Init.
     */
    constructor(input: IRequestInfo, init?: IRequestInit);
    /**
     * Returns referrer.
     *
     * @returns Referrer.
     */
    get referrer(): string;
    /**
     * Returns URL.
     *
     * @returns URL.
     */
    get url(): string;
    /**
     * Returns string tag.
     *
     * @returns String tag.
     */
    get [Symbol.toStringTag](): string;
    /**
     * Returns array buffer.
     *
     * @returns Array buffer.
     */
    arrayBuffer(): Promise<ArrayBuffer>;
    /**
     * Returns blob.
     *
     * @returns Blob.
     */
    blob(): Promise<IBlob>;
    /**
     * Returns buffer.
     *
     * @returns Buffer.
     */
    buffer(): Promise<Buffer>;
    /**
     * Returns text.
     *
     * @returns Text.
     */
    text(): Promise<string>;
    /**
     * Returns json.
     *
     * @returns JSON.
     */
    json(): Promise<string>;
    /**
     * Clones request.
     *
     * @returns Clone.
     */
    clone(): IRequest;
}
//# sourceMappingURL=Request.d.ts.map