"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const CSSStyleSheet_1 = __importDefault(require("../../css/CSSStyleSheet"));
const ResourceFetch_1 = __importDefault(require("../../fetch/ResourceFetch"));
const HTMLElement_1 = __importDefault(require("../html-element/HTMLElement"));
const Event_1 = __importDefault(require("../../event/Event"));
const ErrorEvent_1 = __importDefault(require("../../event/events/ErrorEvent"));
const DOMTokenList_1 = __importDefault(require("../../dom-token-list/DOMTokenList"));
/**
 * HTML Link Element.
 *
 * Reference:
 * https://developer.mozilla.org/en-US/docs/Web/API/HTMLLinkElement.
 */
class HTMLLinkElement extends HTMLElement_1.default {
    constructor() {
        super(...arguments);
        this.onerror = null;
        this.onload = null;
        this.sheet = null;
        this._evaluateCSS = true;
        this._relList = null;
    }
    /**
     * Returns rel list.
     *
     * @returns Rel list.
     */
    get relList() {
        if (!this._relList) {
            this._relList = new DOMTokenList_1.default(this, 'rel');
        }
        return this._relList;
    }
    /**
     * Returns as.
     *
     * @returns As.
     */
    get as() {
        return this.getAttribute('as') || '';
    }
    /**
     * Sets crossOrigin.
     *
     * @param crossOrigin CrossOrigin.
     */
    set as(as) {
        this.setAttribute('as', as);
    }
    /**
     * Returns crossOrigin.
     *
     * @returns CrossOrigin.
     */
    get crossOrigin() {
        return this.getAttribute('crossorigin') || '';
    }
    /**
     * Sets crossOrigin.
     *
     * @param crossOrigin CrossOrigin.
     */
    set crossOrigin(crossOrigin) {
        this.setAttribute('crossorigin', crossOrigin);
    }
    /**
     * Returns href.
     *
     * @returns Href.
     */
    get href() {
        return this.getAttribute('href') || '';
    }
    /**
     * Sets href.
     *
     * @param href Href.
     */
    set href(href) {
        this.setAttribute('href', href);
    }
    /**
     * Returns hreflang.
     *
     * @returns Hreflang.
     */
    get hreflang() {
        return this.getAttribute('hreflang') || '';
    }
    /**
     * Sets hreflang.
     *
     * @param hreflang Hreflang.
     */
    set hreflang(hreflang) {
        this.setAttribute('hreflang', hreflang);
    }
    /**
     * Returns media.
     *
     * @returns Media.
     */
    get media() {
        return this.getAttribute('media') || '';
    }
    /**
     * Sets media.
     *
     * @param media Media.
     */
    set media(media) {
        this.setAttribute('media', media);
    }
    /**
     * Returns referrerPolicy.
     *
     * @returns ReferrerPolicy.
     */
    get referrerPolicy() {
        return this.getAttribute('referrerPolicy') || '';
    }
    /**
     * Sets referrerPolicy.
     *
     * @param referrerPolicy ReferrerPolicy.
     */
    set referrerPolicy(referrerPolicy) {
        this.setAttribute('referrerPolicy', referrerPolicy);
    }
    /**
     * Returns rel.
     *
     * @returns Rel.
     */
    get rel() {
        return this.getAttribute('rel') || '';
    }
    /**
     * Sets rel.
     *
     * @param rel Rel.
     */
    set rel(rel) {
        this.setAttribute('rel', rel);
    }
    /**
     * Returns type.
     *
     * @returns Type.
     */
    get type() {
        return this.getAttribute('type') || '';
    }
    /**
     * Sets type.
     *
     * @param type Type.
     */
    set type(type) {
        this.setAttribute('type', type);
    }
    /**
     * @override
     */
    setAttributeNode(attribute) {
        const replacedAttribute = super.setAttributeNode(attribute);
        const rel = this.getAttribute('rel');
        const href = this.getAttribute('href');
        if (attribute.name === 'rel' && this._relList) {
            this._relList._updateIndices();
        }
        if ((attribute.name === 'rel' || attribute.name === 'href') &&
            href !== null &&
            rel &&
            rel.toLowerCase() === 'stylesheet' &&
            this.isConnected &&
            !this.ownerDocument.defaultView.happyDOM.settings.disableCSSFileLoading) {
            this.ownerDocument._readyStateManager.startTask();
            ResourceFetch_1.default.fetch(this.ownerDocument, href)
                .then((code) => {
                const styleSheet = new CSSStyleSheet_1.default();
                styleSheet.replaceSync(code);
                this.sheet = styleSheet;
                this.dispatchEvent(new Event_1.default('load'));
                this.ownerDocument._readyStateManager.endTask();
            })
                .catch((error) => {
                this.dispatchEvent(new ErrorEvent_1.default('error', {
                    message: error.message,
                    error
                }));
                this.ownerDocument.defaultView.dispatchEvent(new ErrorEvent_1.default('error', {
                    message: error.message,
                    error
                }));
                this.ownerDocument._readyStateManager.endTask();
                if (!this['_listeners']['error'] &&
                    !this.ownerDocument.defaultView['_listeners']['error']) {
                    this.ownerDocument.defaultView.console.error(error);
                }
            });
        }
        return replacedAttribute;
    }
    /**
     * @override
     */
    removeAttributeNode(attribute) {
        super.removeAttributeNode(attribute);
        if (attribute.name === 'rel' && this._relList) {
            this._relList._updateIndices();
        }
        return attribute;
    }
    /**
     * @override
     */
    _connectToNode(parentNode = null) {
        const isConnected = this.isConnected;
        const isParentConnected = parentNode ? parentNode.isConnected : false;
        super._connectToNode(parentNode);
        if (isParentConnected &&
            isConnected !== isParentConnected &&
            this._evaluateCSS &&
            !this.ownerDocument.defaultView.happyDOM.settings.disableCSSFileLoading) {
            const href = this.getAttribute('href');
            const rel = this.getAttribute('rel');
            if (href !== null && rel && rel.toLowerCase() === 'stylesheet') {
                this.ownerDocument._readyStateManager.startTask();
                ResourceFetch_1.default.fetch(this.ownerDocument, href)
                    .then((code) => {
                    const styleSheet = new CSSStyleSheet_1.default();
                    styleSheet.replaceSync(code);
                    this.sheet = styleSheet;
                    this.dispatchEvent(new Event_1.default('load'));
                    this.ownerDocument._readyStateManager.endTask();
                })
                    .catch((error) => {
                    this.dispatchEvent(new ErrorEvent_1.default('error', {
                        message: error.message,
                        error
                    }));
                    this.ownerDocument.defaultView.dispatchEvent(new ErrorEvent_1.default('error', {
                        message: error.message,
                        error
                    }));
                    this.ownerDocument._readyStateManager.endTask();
                    if (!this['_listeners']['error'] &&
                        !this.ownerDocument.defaultView['_listeners']['error']) {
                        this.ownerDocument.defaultView.console.error(error);
                    }
                });
            }
        }
    }
}
exports.default = HTMLLinkElement;
//# sourceMappingURL=HTMLLinkElement.js.map