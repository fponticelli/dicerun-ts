"use strict";
/*
Copyright 2018 Google LLC

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Pattern to recognize if a field name is in a format that doesn't require quotes.
 */
exports.isToken = /^[a-z$_]+$/i;
/**
 * Adds double quotes to a string if it is not a simple sequence of
 * alpha-numeric characters.
 */
exports.autoQuote = function (value) {
    if (exports.isToken.test(value)) {
        return value;
    }
    else {
        var t = value.replace('"', '\\"');
        return "\"" + t + "\"";
    }
};
/**
 * Pretty prints a `ValueInput.path` value.
 */
exports.pathToString = function (path) {
    return path.reduce(function (acc, curr) {
        if (typeof curr === 'number') {
            return acc + "[" + curr + "]";
        }
        else if (exports.isToken.test(curr)) {
            return acc.length === 0 ? curr : acc + "." + curr;
        }
        else {
            var t = curr.replace('"', '\\"');
            return acc + "[\"" + t + "\"]";
        }
    }, '');
};
/**
 * Tries to convert any value into a human readable string.
 */
function valueToString(value) {
    if (Array.isArray(value)) {
        return "[" + value.map(valueToString).join(',') + "]";
    }
    else if (value === null) {
        return 'null';
    }
    else if (typeof value === 'object') {
        var pairs = Object.keys(value).map(function (k) { return exports.autoQuote(k) + ":" + valueToString(value[k]); });
        var prefix = (value.constructor &&
            value.constructor.name &&
            value.constructor.name !== 'Object' &&
            value.constructor.name + " ") ||
            '';
        return prefix + "{" + pairs.join(',') + "}";
    }
    else if (typeof value === 'string') {
        return exports.autoQuote(value);
    }
    else {
        return String(value);
    }
}
exports.valueToString = valueToString;
/**
 * Utility function to generate a comma separate list of values where the last
 * one is concatenated by `or`.
 */
exports.concatOr = function (values) {
    var length = values.length;
    if (length === 0) {
        return '<empty>';
    }
    else if (length <= 2) {
        return values.join(' or ');
    }
    else {
        var last = values[length - 1];
        var head = values.slice(0, length - 1);
        return head.join(', ') + " or " + last;
    }
};
//# sourceMappingURL=index.js.map